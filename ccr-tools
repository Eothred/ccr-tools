#!/bin/bash
ver=0.1
tempdir=$(mktemp -d)
configrc=$HOME/.config/ccr-toolsrc
ccrbaseurl="http://chakra-linux.org/ccr/"
rpcurl="${ccrbaseurl}rpc.php?type"
ccrurl="${ccrbaseurl}packages.php"
idurl="${ccrbaseurl}rpc.php?type=info&arg="
checkurl="${ccrbaseurl}packages.php?ID="
submiturl="${ccrbaseurl}pkgsubmit.php"

# Defining some functions needed by main program

die() {
    if [ -d "$tempdir" ]; then
        rm -rf "$tempdir"
    fi
    exit $1
}

err() {
    echo -e "$1"
    die 1
}

version() {
    echo "ccr-tools - version $ver"
    echo
    echo " http://cruznick.github.com/"
    exit
}

usage() {
    echo "ccr-tools - version $ver"
    echo
    echo "usage: ccr-tools <option> <pkgname1> <pkgname2> ..."
    echo
    echo "ccr-tools --version,    -V    shows version"
    echo "ccr-tools --help,       -h    shows this help"
    echo "ccr-tools --vote,       -v    vote for packages"
    echo "ccr-tools --unvote,     -u    unvote packages"
    echo "ccr-tools --check,      -c    check for voted packages"
    echo "ccr-tools --submit,     -s    submit a new package"
    echo "ccr-tools --category,   -C    category for new packages"
    echo "ccr-tools --maintainer, -m    list all packages by maintainer"
    echo
    echo " example:  ccr-tools --vote shake bfilter"
    echo
    echo "You can create ~/.config/ccr-toolsrc containing:"
    echo "user=YOUR_CCR_USERNAME"
    echo "pass=YOUR_CCR_PASS"
    echo
    echo "To create a new account just go to:"
    echo "http://chakra-linux.org/ccr/account.php"
    echo 
    echo "Fork of aurvote <http://archlinux.fr/>"
    echo "written by cruznick <cruznick at archlinux dot us>"
    echo " http://cruznick.github.com"
    exit
}

# Tests whether $1 exists on the ccr
existsinccr() {
    retval=$(curl -LfGs --data-urlencode "arg=$pkgname" "$rpcurl=info" | \
        jshon -Qe type -u)

    [[ $retval = "info" && ! $category ]]
}

getcat() {
    declare -A categories
    if [[ "$1" =~ ^[0-9]+ ]]; then
        categories=(
            ["1"]="none"
            ["2"]="daemons"
            ["3"]="devel"
            ["4"]="editors"
            ["15"]="educational"
            ["5"]="emulators"
            ["6"]="games"
            ["7"]="gnome"
            ["8"]="i18n"
            ["9"]="kde"
            ["10"]="lib"
            ["19"]="lib32"
            ["11"]="modules"
            ["12"]="multimedia"
            ["13"]="network"
            ["14"]="office"
            ["16"]="system"
            ["18"]="utils"
            ["17"]="x11"
        )
    else
        categories=(
            ["daemons"]="2"
            ["devel"]="3"
            ["editors"]="4"
            ["educational"]="15"
            ["emulators"]="5"
            ["games"]="6"
            ["gnome"]="7"
            ["i18n"]="8"
            ["kde"]="9"
            ["lib"]="10"
            ["lib32"]="19"
            ["modules"]="11"
            ["multimedia"]="12"
            ["network"]="13"
            ["office"]="14"
            ["system"]="16"
            ["utils"]="18"
            ["x11"]="17"
        )
    fi

    if [[ "${1}" = "" ]]; then
        catvalue="1"
    else
        catvalue=${categories[$1]}
    fi
    if [[ "${catvalue}" == "" ]]; then
        echo "'$1' is not a valid category."
        die 1
    fi
}

urlencode() {
    echo $@ | LANG=C awk '
        BEGIN {
            split ("1 2 3 4 5 6 7 8 9 A B C D E F", hextab, " ")
            hextab [0] = 0
            for ( i=1; i<=255; ++i ) ord [ sprintf ("%c", i) "" ] = i + 0
        }
        {
            encoded = ""
            for ( i=1; i<=length ($0); ++i ) {
                c = substr ($0, i, 1)
                if ( c ~ /[a-zA-Z0-9.-]/ ) {
                    encoded = encoded c             # safe character
                } else if ( c == " " ) {
                    encoded = encoded "+"   # special handling
                } else {
                    # unsafe character, encode it as a two-digit hex-number
                    lo = ord [c] % 16
                    hi = int (ord [c] / 16);
                    encoded = encoded "%" hextab [hi] hextab [lo]
                }
            }
                print encoded
        }
        END {
        }
    '
}

getcred() {
    # Check config file
    if [ -r ~/.ccr-toolsrc ] && [ ! -r "$configrc" ]; then
        echo "Moving ~/.ccr-toolsrc to $configrc"
        mv ~/.ccr-toolsrc $configrc
    fi
      
    [ -r "$configrc" ] && source $configrc
}

login() {
    getcred

    while [[ -z $user ]]; do read -p "please enter your CCR username: " user; done
    while [[ -z $pass ]]; do read -p "please enter your CCR password: " -s pass && echo; done

    # logins to ccr and keeps session alive
    umask 077
    curl -Ss --cookie-jar "$tempdir/cjar" --output /dev/null ${ccrbaseurl} 
    curl -Ss --cookie "$tempdir/cjar" --cookie-jar "$tempdir/cjar"  \
    --data "user=$user" --data "passwd=$(urlencode $pass)" \
    --location --output "$tempdir/ccrvote.login"  \
      ${ccrbaseurl}
    if grep --quiet "'error'>Bad username or password" "$tempdir/ccrvote.login";then
        echo "incorrect password: check $configrc file"
        die 1
    fi
}

getccrid() {
    ccrid=$(wget --quiet "${idurl}${1}" -O - | \
    sed 's/.*"ID":"\([^"]*\)".*/\1/;q')
}

maintainer() {
    if [[ ! $maintainer ]]; then 
        getcred
        [[ $user ]] && maintainer=$user || err "You must specify a maintainer." 
    fi

    # this will break if the description contains '@'
    curl -LfGs --data-urlencode "arg=$maintainer" "$rpcurl=msearch" | \
        jshon -Q -e results -a -e Name -u -p -e Version -u -p -e CategoryID -u -p -e Description -u | \
        paste -s -d "@@@\n" | sed -e "s/\(.*@.*@\)\([0-9][0-9]*\)@/\1test@/g" | \
        column -t -s '@' | cut -c1-$(tput cols)

    exit
}

vote() {
    login

    # vote/unvote/check for each package
    for pkgname in ${pkgargs[@]}; do
        getccrid $pkgname
        if [ -z "$ccrid" ]; then
            echo "$pkgname was not found on CCR"
            continue
        fi
        if [ "$action" = "check" ]; then
            curl -Ss --cookie "$tempdir/cjar"  --cookie-jar "$tempdir/cjar" \
                --output "$tempdir/$pkgname" \
                "${checkurl}${ccrid}"
            echo -n "$pkgname:  "
            if grep -q "type='submit' class='button' name='do_UnVote'" $tempdir/$pkgname; then
                echo "already voted"
            elif grep -q "type='submit' class='button' name='do_Vote'" $tempdir/$pkgname; then
                echo "not voted"
            else
                echo "voted status not found"
            fi
        elif [ "$action" = "vote" ]; then
            if curl -Ss --cookie "$tempdir/cjar" --cookie-jar "$tempdir/cjar" --data "IDs[${ccrid}]=1" \
                --data "ID=${ccrid}" --data "do_Vote=1" \
                --output /dev/null http://chakra-linux.org/ccr/packages.php; then
                echo "$pkgname now voted"
            else
                echo "ERROR: Can't access $ccrurl"
            fi
        elif [ "$action" = "unvote" ]; then
             if curl -Ss --cookie "$tempdir/cjar" --cookie-jar "$tempdir/cjar" --data "IDs[${ccrid}]=1" \
                --data "ID=${ccrid}" --data "do_UnVote=1" \
                --output /dev/null http://chakra-linux.org/ccr/packages.php; then
                echo "$pkgname now unvoted"
            else
                echo "ERROR: Can't access $ccrurl"
            fi
        fi
    done
}

submit() {
    # we don't even want to submit something different than source files
    if [[ ! -f $pkgargs || $pkgargs != *.src.tar.gz ]]; then
       echo "`basename ${pkgsrc}` is not a source package!"
       die 1
    fi

    # get the pkgname from the archive
    pkgname=$(tar -xzOf $pkgargs --no-anchored 'PKGBUILD' | sed -n "s/pkgname=['\"]\?\([^'\"]*\)['\"]\?/\1/p")

    if ! existsinccr $pkgname && [[ ! $category ]]; then
        err "You must provide a category."
        die 2
    fi

    getcat $category
    
    login

    # TODO allow multiple files to be uploaded.
    #+advantages: you can update lots of packages at once
    #+drawback, only one category can be selected for all of them
    local error
    error=$(curl -sS --cookie "$tempdir/cjar" --cookie-jar "$tempdir/cjar" \
        --form "pkgsubmit=1" \
        --form "category=${catvalue}" \
        --form "pfile=@${pkgargs}" \
        "${submiturl}" | \
        sed -n "s|.*<span class='error'>\(.*\)</span>.*|\1|p")
    [[ $error ]] || error="Successfully uploaded."
    echo "`basename ${pkgargs} ".src.tar.gz"` : $error"
}

### MAIN PROGRAM ###
pkgargs=()
while [ "$#" -ne "0" ]; do
	case $1 in
    --help|-h)     usage ;;
    --version|-V)  version ;;
    --check|-c)    action="check" ;;
    --vote|-v)     action="vote" ;;
    --unvote|-u)   action="unvote" ;;
    --submit|-s)   action="submit" ;;
    --category|-C) shift ; category=$1 ; shift ;;
    --maintainer|-m) action="maintainer"; shift ; maintainer=$1 ; break ;;
    --*|-*)        echo "ccr-tools: Option \`$1' is not valid." ; exit 5 ;;
    *)             pkgargs+=("$1") ;;
	esac
	shift
done

# sanity check
[[ $action ]] || usage
[[ $action != "maintainer" && -z $pkgargs ]] && err "Must specify a package."

[[ $action = "vote" || $action = "check" || $action = "unvote" ]] && vote
[[ $action = "submit" ]] && submit
[[ $action = "maintainer" ]] && maintainer

die 0

# vim: sts=4 ts=4 sw=4 et
